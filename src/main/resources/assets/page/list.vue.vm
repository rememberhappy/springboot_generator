<template>
    <div class="table">
        <el-form :inline="true" ref="queryForm" :model="queryVo" :rules="queryRules" size="small">
            <el-form-item label="名称" prop="name">
                <el-input v-model="queryVo.name" placeholder="请输入"></el-input>
            </el-form-item>
            <el-form-item>
                <el-button type="primary" plain @click="findByCondition()">查询</el-button>
                <el-button type="default" plain @click="reset()">重置</el-button>
            </el-form-item>
            <el-form-item style="float: right">
                <el-button type="primary" @click="toAdd()">添加</el-button>
            </el-form-item>
        </el-form>

        <el-table
                :data="tableData"
                border>
            <el-table-column
                    v-if="false"
                    prop="id"
                    label="id"
                    width="10">
            </el-table-column>

            #foreach($field in $fieldList)
                <el-table-column
                        prop="$field"
                        label="$field">
                </el-table-column>
            #end

            <el-table-column
                    fixed="right"
                    label="操作"
                    width="90">
                <template slot-scope="scope">
                    ##                    <el-button @click="getDetail(scope.row)" type="text" size="small">查看</el-button>
                    <el-button type="text" size="small" @click="toEdit(scope.$index, scope.row)">编辑</el-button>
                    <el-button type="text" size="small" @click="toRemove(scope.$index, scope.row)">删除</el-button>
                </template>
            </el-table-column>
        </el-table>
        <el-pagination style="float: right; margin-top: 10px;"
                       @size-change="handleSizeChange"
                       @current-change="handleCurrentChange"
                       :current-page="queryForm.pageNum"
                       :page-sizes="[10, 20, 50, 100]"
                       :page-size="queryForm.pageSize"
                       layout="total, sizes, prev, pager, next, jumper"
                       :total="totalCount">
        </el-pagination>

        <el-dialog v-bind:title="dataForEdit.id ? '编辑': '添加'" :visible.sync="editDialogShow" width="60%">
            <el-form ref="editForm" :rules="rules" label-position="left" :model="dataForEdit">
                #foreach($field in $fieldList)
                    <el-form-item label="$field" prop="$field" :label-width="labelWidth">
                        <el-input v-model="dataForEdit.$field" placeholder="请输入"></el-input>
                    </el-form-item>
                #end
            </el-form>

            <div slot="footer" class="dialog-footer">
                <el-button @click="cancelCommit">取 消</el-button>
                <el-button type="primary" @click="commitData()">确 定</el-button>
            </div>
        </el-dialog>

        ##        <el-dialog title="编辑" :visible.sync="editDialogShow">
        ##            <el-form ref="editForm" :rules="rules" label-position="left" :model="dataForEdit">
        ##                #foreach($field in $fieldList)
        ##                    <el-form-item label="$field" prop="$field">
        ##                        <el-input v-model="dataForEdit.$field" placeholder="请输入"></el-input>
        ##                    </el-form-item>
        ##                #end
        ##            </el-form>
        ##
        ##            <div slot="footer" class="dialog-footer">
        ##                <el-button @click="editDialogShow = false">取 消</el-button>
        ##                <el-button type="primary" @click="updateData()">确 定</el-button>
        ##            </div>
        ##        </el-dialog>

        ##        <el-dialog title="添加" :visible.sync="addDialogShow">
        ##            <el-form ref="addForm" :rules="rules" label-position="left" :model="dataForAdd">
        ##                #foreach($field in $fieldList)
        ##                    <el-form-item label="$field" prop="$field">
        ##                        <el-input v-model="dataForAdd.$field" placeholder="请输入"></el-input>
        ##                    </el-form-item>
        ##                #end
        ##            </el-form>
        ##
        ##            <div slot="footer" class="dialog-footer">
        ##                <el-button @click="cancelAdd()">取 消</el-button>
        ##                <el-button type="primary" @click="addData()">确 定</el-button>
        ##            </div>
        ##        </el-dialog>

    </div>

</template>


<script>
    import Vue from 'vue'

    export default {
        data() {
            return {
                /**
                 * 对话框的label宽度
                 */
                labelWidth: '80px',
                /**
                 * 表格数据
                 **/
                tableData: [],
                /**
                 * 数据总数
                 */
                totalCount: null,
                /**
                 * 查询参数校验规则
                 **/
                queryRules: {},
                /**
                 * 查询参数
                 **/
                queryForm: {
                    name: null,
                    pageSize: 10,
                    pageNum: 1,
                },
                /**
                 * 修改对话框是否显示
                 */
                editDialogShow: false,

                /**
                 * 修改对话框数据
                 */
                dataForEdit: {},

                /**
                 * 修改对话框数据索引值
                 */
                dataForEditIndex: null,

                /**
                 * 校验规则
                 */
                rules: {
            #foreach($field in $fieldList)
                $field:
                [
                    {required: true, message: '请输入$field', trigger: 'blur'},
                    {min: 3, max: 10, message: '长度在3-10个字符', trigger: 'blur'}
                ],
            #end
        }

        }
        },


        methods: {
            /**
             * 查询
             */
            findByCondition: async function () {
                let data = await this.http("/${objName}/v1/findByCondition?pageNum=" + this.queryForm.pageNum + "&pageSize=" + this.queryForm.pageSize, this.queryForm);
                console.log("data: ", data);
                if (data) {
                    this.tableData = data.list;
                    this.totalCount = data.total;//总记录数目
                } else {
                    this.tableData = [];
                    this.totalCount = 0;
                }
            },

            /**
             * 重置查询表单
             */
            reset() {
                this.${doller}refs["queryForm"].resetFields();
            },

            getDetail(row) {
                console.log("查看详情：", row)
            },
            /**
             * 跳转到添加数据页面
             */
            toAdd() {
                console.log("唤起添加对话框")
                ##                this.${doller}router.push("/${objName}/add");
                this.editDialogShow = true;
                this.dataForEdit = {};
            },
            /**
             * 唤起编辑对话框
             */
            toEdit(idx, row) {
                console.log("编辑：", row)
                this.dataForEdit = JSON.parse(JSON.stringify(row));
                this.dataForEditIndex = idx;
                this.editDialogShow = true;
            },

            /**
             * 提交更新数据
             */
            commitData: async function () {
                console.log("更新数据");
                console.log("dataForEdit:", this.dataForEdit);

                this.${doller}refs['editForm'].validate(async (valid) => {
                    if (!valid) {
                        console.log("参数校验不通过，请处理");
                        return false;
                    } else {
                        var res = await this.http('/${objName}/v1/save', this.dataForEdit, 3000);
                        if (res) {
                            if (this.dataForEdit.id) {
                                //                修改
                                Vue.set(this.tableData, this.dataForEditIndex, this.dataForEdit);
                                //        以下代码变动无法触发页面渲染
                                //        this.tableData[this.dataForEditIndex] = Object.assign({},this.dataForEdit);
                                //          console.log(this.tableData)
                                //        关闭对话框
                                this.editDialogShow = false;
                            } else {
                                //                新增
                                this.${doller}confirm('继续添加?查看列表?', '提示', {
                                    confirmButtonText: '继续添加',
                                    cancelButtonText: '查看列表',
                                    type: 'success',
                                    center: true
                                }).then(() => {
                                    this.dataForEdit = {
                                        count: 0,
                                        questionTypeIdList: [],
                                        contentItemList: [],
                                    };
                                    //                  this.$refs['addForm'].resetFields()
                                    ;
                                }).catch(() => {
                                    this.findByCondition();
                                    //        关闭对话框
                                    this.addDialogShow = false;
                                });
                            }

                        } else if (res == false) {
                            console.log("请求成功，处理失败");
                        } else if (res == null) {
                            console.error("请求失败")
                        }
                        //        关闭对话框
                        //            this.editDialogShow = false;
                    }
                });
            },

            /**
             * 取消
             */
            cancelCommit: async function () {
                this.$refs["editForm"].resetFields();
                if (!this.dataForEdit.id) {
                    this.findByCondition();
                }
                this.editDialogShow = false;
            },

            /**
             * 删除数据
             */
            async toRemove(idx, row) {
                ## console.log("删除：", idx, row)
                ## let data = await this.http("/${objName}/v1/delete?id=" + row.id);
                ## if (data == true) {
                ##     this.tableData.splice(idx, 1);
                ##     this.tableData = this.tableData;
                ## } else if (data == false) {
                ##     console.log("删除失败");
                ##     this.${doller}notify({
                ##         title: '警告',
                ##         message: "删除失败",
                ##         type: 'warning'
                ##     });
                ## }

                this.${doller}confirm('数据删除后无法找回, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(async () => {

                    console.log("删除：", idx, row)
                    let data = await this.http("/${objName}/v1/delete?id=" + row.id);
                    if (data == true) {
                        this.tableData.splice(idx, 1);
                        this.tableData = this.tableData;
                        this.${doller}message({
                            type: 'success',
                            message: '删除成功!'
                        });
                    } else if (data == false) {
                        console.log("删除失败");
                        this.${doller}notify({
                            title: '警告',
                            message: "删除失败",
                            type: 'warning'
                        });
                    }
                }).catch(() => {
                    //  解决uncaught cancel的异常
                });
            },

            handleSizeChange(val) {
                this.queryForm.pageSize = val;
                console.log(`每页 ${doller}{val} 条`);
                this.findByCondition();
            },
            handleCurrentChange(val) {
                this.queryForm.pageNum = val;
                console.log(`当前页: ${doller}{val}`);
                this.findByCondition();
            }
        },
        /**
         * 页面初始化时候执行
         **/
        created: async function () {
            console.log("created....")
            this.findByCondition();
        }
    }
</script>

<style>
    .el-pager > li, button.btn-prev, button.btn-next {
        border: 1px solid gainsboro;
        border-left: none;
    }

    .el-pager > li.active {
        background-color: #3091F2;
        border: none;
        color: white;
    }

    button.btn-prev {
        border-left: 1px solid gainsboro;
    }
</style>