<template>
  <div class="table">
    <el-form :inline="true" ref="queryForm" :model="queryVo" :rules="queryRules" size="small">
      <el-form-item label="名称" prop="name">
        <el-input v-model="queryVo.name" placeholder="请输入"></el-input>
      </el-form-item>
      <el-form-item>
        <el-button type="primary" plain @click="findByCondition()">查询</el-button>
        <el-button type="default" plain @click="reset()">重置</el-button>
      </el-form-item>
      <el-form-item style="float: right">
        <el-button type="primary" @click="toAdd()">添加</el-button>
      </el-form-item>
    </el-form>

    <bg-table
      :table-data="tableData"
      @tableChange="handleTableChange"
      border>

      <el-table-column
        v-if="false"
        prop="id"
        label="id"
        width="10">
      </el-table-column>
    #foreach($field in $fieldList)
      <el-table-column
              prop="$field"
              label="$field">
      </el-table-column>
    #end
      <el-table-column
        fixed="right"
        label="操作"
        width="90">
        <template slot-scope="scope">
          <el-button type="text" size="small" @click="toEdit(scope.$index, scope.row)">编辑</el-button>
          <el-button type="text" size="small" @click="toRemove(scope.$index, scope.row)">删除</el-button>
        </template>
      </el-table-column>
    </bg-table>

    <el-dialog v-bind:title="obj.id ? '编辑': '添加'" :visible.sync="editDialogShow" width="60%">
      <edit @saveDone="handleSaveDone" :obj="obj"></edit>
    </el-dialog>


  </div>

</template>


<script>
  import BgTable from "../../components/bg-table";
  import Edit from "./edit.vue";

  export default {
    name: '${objName}List',
    components: {Edit, BgTable},
    props:{
      projectId: Number,
    },
    data() {
      return {
        /**
         * 表格数据
         **/
        tableData: {
          pageSize: 10,
          pageNum: 1,
        },
        /**
         * 查询参数校验规则
         **/
        queryRules: {},
        /**
         * 查询参数
         **/
        queryVo: {
        },
        /**
         * 修改对话框是否显示
         */
        editDialogShow: false,

        /**
         * 修改对话框数据
         */
        obj: {},

        /**
         * 修改对话框数据索引值
         */
        objIndex: null,


      }
    },


    methods: {
      /**
       * 编辑表单执行完成
       */
      handleSaveDone(args) {
        this.editDialogShow = false;
        console.log("event", args)
        if (args == true) {
          this.findByCondition();
        } else {
          console.log("失败了，什么都不做");
        }
      },
      /**
       * 表格变化时候执行  主要是pageNum和pageSize
       */
      handleTableChange(obj) {
        this.tableData = obj;
        console.log("change", obj)
        this.findByCondition();
      },
      /**
       * 查询
       */
      findByCondition: async function () {
        let tableData = await this.httpUtil.postByJson(`/${objName}/findByCondition?pageNum=${this.tableData.pageNum}&pageSize=${this.tableData.pageSize}`, this.queryVo);
        console.log("data: ", tableData);
        if (tableData) {
          this.tableData = tableData;
        }
      },

      /**
       * 重置查询表单
       */
      reset() {
        this.$refs["queryForm"].resetFields();
      },

      getDetail(row) {
        console.log("查看详情：", row)
      },
      /**
       * 跳转到添加数据页面
       */
      toAdd() {
        console.log("唤起添加对话框")
        this.editDialogShow = true;
        this.obj = {};
        this.objIndex = -1;
      },
      /**
       * 唤起编辑对话框
       */
      toEdit(idx, row) {
        console.log("编辑：", row)
        this.obj = JSON.parse(JSON.stringify(row));
        this.objIndex = idx;
        this.editDialogShow = true;
      },

      /**
       * 删除数据
       */
      async toRemove(idx, row) {
        this.$confirm('数据删除后无法找回, 是否继续?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(async () => {

          console.log("删除：", idx, row)
          let data = await this.http(`/${objName}/delete?id=${row.id}`);
          if (data == true) {
            this.$message({
              type: 'success',
              message: '删除成功!'
            });
            this.findByCondition();
          } else if (data == false) {
            console.log("删除失败");
            this.$notify({
              title: '警告',
              message: "删除失败",
              type: 'warning'
            });
          }
        }).catch(() => {
          //  解决uncaught cancel的异常
        });
      },
    },
    /**
     * 页面初始化时候执行
     **/
    created: async function () {
      console.log("created....")
      await this.findByCondition();
    }
  }
</script>

<style>

</style>
