package ${controllerPackage};

import cc.wdcloud.base.enums.DelEnum;
import com.github.pagehelper.PageInfo;
import com.google.common.base.Preconditions;
import cc.wdcloud.base.Resp;
import ${domainPackage}.${domainName};
import ${servicePackage}.${serviceName};
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

/**
 * todo 写下本controller 你的注释
 *
 * @author ${author}
 * @version 1.0.0
 * @createdAt ${createDate}
 * @updatedAt ${createDate}
 */
@Api(tags = "${objName}")
@RestController
@RequestMapping("/${objName}")
public class ${domainName}Controller {

    @Autowired
    ${serviceName} ${objName}Service;

    /**
     * 条件查询, 分页
     *
     * @param
     * @return
     * @author ${author}
     * @createdAt ${createDate}
     * @updatedAt ${createDate}
     */
    @ApiOperation(value = "条件查询")
    @RequestMapping(value = "/findByCondition", method = {RequestMethod.GET, RequestMethod.POST})
    public Resp<PageInfo<${domainName}>> findByCondition(Integer pageNum, Integer pageSize, @RequestBody(required = false) ${domainName} ${objName}) {
        if (null == pageNum) {
            pageNum = 1;
        }
        if (null == pageSize) {
            pageSize = 10;
        }

        PageInfo<${domainName}> pageInfo = ${objName}Service.findByConditionWithPage(pageNum, pageSize, ${objName});
        return Resp.success(pageInfo);
    }

    /**
     * 保存
     *
     * @param
     * @return
     * @author ${author}
     * @createdAt ${createDate}
     * @updatedAt ${createDate}
     */
    @ApiOperation(value = "保存和更新")
    @RequestMapping(value = "/save", method = RequestMethod.POST)
    public Resp<Long> save(@RequestBody ${domainName} ${objName}) {
        Long ${objName}Id = ${objName}.getId();
        if (null == ${objName}Id) {
                ${objName}Service.insert(${objName});
                ${objName}Id = ${objName}.getId();

        } else {
                ${objName}Service.updateById(${objName});
        }
        return Resp.success(${objName}Id);
    }

    /**
     * 获取详情
     * 不建议使用，在以下场景禁止使用
     * 1 api接口，不管是否经过授权
     *
     * 以下场景谨慎使用：
     * 1 内网环境；
     * 2 k8s环境以eureka的形式提供调用
     *
     * 总之：不建议提供。 替换方案： findByUcode
     *
     * @param
     * @return
     * @author ${author}
     * @createdAt ${createDate}
     * @updatedAt ${createDate}
     */
    @Deprecated
    @ApiOperation(value = "主键查询， 不建议使用， 替换方案： findByUcode")
    @RequestMapping(value = "/findById", method = RequestMethod.GET)
    public Resp<${domainName}> findById(Long id) {
        ${domainName} ${objName} =${objName}Service.findById(id);
        return Resp.success(${objName});
    }

    /**
     * 通过code查找，用于对外暴露
     *
     * @param
     * @return
     * @author ${author}
     * @createdAt ${createDate}
     * @updatedAt ${createDate}
     */
    @ApiOperation(value = "主键查询")
    @RequestMapping(value = "/findByUcode", method = RequestMethod.GET)
    public Resp<${domainName}> findByUcode(String ucode) {
        ${domainName} ${objName} =${objName}Service.findByUcode(ucode);
        return Resp.success(${objName});
    }

    /**
     * 删除，软删除，更新数据库删除标志
     * 所有删除操作， 只通过ucode执行
     * 同时， 禁止批量删除。
     * @param
     * @return
     * @author ${author}
     * @createdAt ${createDate}
     * @updatedAt ${createDate}
     */
    @ApiOperation(value = "删除")
    @RequestMapping(value = "/delete", method = RequestMethod.POST)
    public Resp<Boolean> delete(String ucode) {
        Preconditions.checkArgument(ucode != null, "编号不能为空");
        ${domainName} ${objName} =${objName}Service.findByUcode(ucode);
        int count = ${objName}Service.delete(${objName});
        return Resp.success(count == 1);
    }
}

